## 水平分库分表配置
spring.profiles.active=dev

# 内存模式
spring.shardingsphere.mode.type=Memory
# 配置数据源名称
spring.shardingsphere.datasource.names=server-order0,server-order1
# 配置对应的数据源信息
spring.shardingsphere.datasource.server-order0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.server-order0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.server-order0.jdbc-url=jdbc:mysql://localhost:3310/db_order?useSSL=false
spring.shardingsphere.datasource.server-order0.username=root
spring.shardingsphere.datasource.server-order0.password=123456

spring.shardingsphere.datasource.server-order1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.server-order1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.server-order1.jdbc-url=jdbc:mysql://localhost:3311/db_server?useSSL=false
spring.shardingsphere.datasource.server-order1.username=root
spring.shardingsphere.datasource.server-order1.password=123456

# 配置分片(通过 inline 表达式可以简化配置)
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=server-order$->{0..1}.t_order$->{0..1}
# 配置分片算法
## 配置分片算法类型(inline - 行内表达式)
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_id.type=INLINE
## 配置 inline 对应的算法逻辑
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_id.props.algorithm-expression=server-order$->{id % 2}
## 配置分片算法类型(hash)
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash.type=HASH_MOD
## hash 后 % 的值
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash.props.sharding-count=2

# 分库算法配置
## 根据指定的列应用算法
spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column=id
### 选择要使用的分片算法
spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name=alg_inline_id
# 分表算法配置
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=id
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=alg_hash

# 分布式id算法配置
## 算法类型
spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.type=SNOWFLAKE
## 最大抖动上限(如果此算法生成的值作为分片值才需要配置，限制统一毫秒内生成的数量，范围：[0,4096))
spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.props.max-vibration-offset=128

# 分布式id配置
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column=id
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name=alg_snowflake

# 打印sql语句
spring.shardingsphere.props.sql-show=true
